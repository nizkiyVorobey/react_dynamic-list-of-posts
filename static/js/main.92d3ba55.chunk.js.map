{"version":3,"sources":["api/getDataFromServer.ts","components/UserItem/UserItem.tsx","components/CommentItem/CommentItem.tsx","components/CommentsList/CommentsList.tsx","components/PostItem/PostItem.tsx","components/PostList/PostsList.tsx","App.tsx","index.tsx"],"names":["getData","endPath","fetch","then","response","json","UserItem","user","name","username","email","className","href","CommentItem","comments","body","CommentList","map","comment","key","id","PostItem","postItem","title","PostsList","postList","useState","inputValue","setInputValue","filedQuery","setFiledQuery","vissiblePosts","useMemo","prepearedPosts","value","filter","post","toLowerCase","includes","setFiledQueryWithDebouce","useCallback","debounce","type","onChange","event","target","placeholder","App","isLoading","setIsLoading","buttonVisible","setButtonVisible","setPostList","onClick","PostsPromise","UsersPromise","CommentsPromise","Promise","all","posts","users","preparedPosts","find","userId","postId","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.92d3ba55.chunk.js","sourcesContent":["const API_URL_BASE = 'https://jsonplaceholder.typicode.com/';\n\nexport function getData<T>(endPath: string): Promise<T> {\n  return fetch(API_URL_BASE + endPath)\n    .then(response => response.json());\n}\n","import React, { FC } from 'react';\nimport './UserItem.css';\n\ninterface Props {\n  user: User;\n}\n\nexport const UserItem: FC<Props> = ({ user }) => {\n  const { name, username, email } = user;\n\n  return (\n    <div className=\"post-author\">\n      <p>{email}</p>\n      <a href=\"null\">\n        <p>{username}</p>\n      </a>\n      <p>{name}</p>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\n\ninterface Props {\n  comments: Comment;\n}\n\nexport const CommentItem: FC<Props> = ({ comments }) => {\n  const { name, body, email } = comments;\n\n  return (\n    <div className=\"post-comments__item\">\n      <h4 className=\"post-comments__title\">{name}</h4>\n      <p className=\"post-comments__body\">{body}</p>\n      <p className=\"post-comments__email\">{email}</p>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { CommentItem } from '../CommentItem/CommentItem';\n\ninterface Props {\n  comments: Comment[];\n}\n\nexport const CommentList: FC<Props> = ({ comments }) => {\n\n  return (\n    <>\n      {\n        comments.map(comment => (\n          <CommentItem comments={comment} key={comment.id} />\n        ))\n      }\n    </>\n  );\n};\n","import React, { FC } from 'react';\nimport { UserItem } from '../UserItem/UserItem';\nimport { CommentList } from '../CommentsList/CommentsList';\nimport './PostItem.css';\n\ninterface Props {\n  postItem: PrepearedPost;\n}\n\nexport const PostItem: FC<Props> = ({ postItem }) => {\n\n  return (\n    <div className=\"post\">\n      <UserItem user={postItem.user} />\n\n      <div className=\"post-body\">\n        <p className=\"post-title\">{postItem.title}</p>\n        <p className=\"post-desctiption\">{postItem.body}</p>\n      </div>\n\n      <div className=\"post-comments\">\n        <CommentList comments={postItem.comments} />\n      </div>\n    </div>\n  );\n};\n","import React, { ChangeEvent, FC, useCallback, useMemo, useState } from 'react';\nimport debounce from 'lodash/debounce';\nimport { PostItem } from '../PostItem/PostItem';\nimport './PostsList.css';\n\ninterface Props {\n  postList: PrepearedPost[];\n}\n\nfunction filterPosts(prepearedPosts: PrepearedPost[], value: string) {\n  return [...prepearedPosts].filter(post => (\n    post.title.toLowerCase().includes(value.toLowerCase())\n    || post.body.toLowerCase().includes(value.toLowerCase())\n  ));\n}\n\nexport const PostsList: FC<Props> = ({ postList }) => {\n  const [inputValue, setInputValue] = useState<string>('');\n  const [filedQuery, setFiledQuery] = useState<string>('');\n\n  const vissiblePosts = useMemo(\n    () => filterPosts(postList, filedQuery),\n    [filedQuery],\n  );\n\n  const setFiledQueryWithDebouce = useCallback(\n    debounce(setFiledQuery, 1000),\n    [],\n  );\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setInputValue(event.target.value);\n    setFiledQueryWithDebouce(event.target.value);\n  };\n\n\n  return (\n    <>\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={handleChange}\n        className=\"sorted-filed\"\n        placeholder=\"Search by title and body\"\n      />\n      {\n        vissiblePosts.map(post => (\n          <PostItem postItem={post} key={post.id} />\n        ))\n      }\n    </>\n  );\n};\n","import React, { useState, FC } from 'react';\nimport { getData } from './api/getDataFromServer';\nimport { PostsList } from './components/PostList/PostsList';\nimport './App.css';\n\nconst App: FC = () => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [buttonVisible, setButtonVisible] = useState<boolean>(true);\n  const [postList, setPostList] = useState<PrepearedPost[]>([]);\n\n  const loadData = () => {\n    const PostsPromise = getData<Post[]>('posts');\n    const UsersPromise = getData<User[]>('users');\n    const CommentsPromise = getData<Comment[]>('comments');\n\n    setIsLoading(true);\n\n    Promise.all([PostsPromise, UsersPromise, CommentsPromise])\n      .then(([posts, users, comments]) => {\n        const preparedPosts = posts.map(post => (\n          {\n            ...post,\n            user: users.find(user => user.id === post.userId) as User,\n            comments: comments.filter(comment => comment.postId === post.id),\n          }\n        ));\n\n        setPostList(preparedPosts);\n        setButtonVisible(false);\n        setIsLoading(false);\n      });\n  };\n\n  return (\n    <>\n      {\n        buttonVisible\n          ? (\n            <button\n              type=\"button\"\n              onClick={loadData}\n              disabled={isLoading}\n              className=\"load-btn\"\n            >\n              Load\n            </button>\n          )\n          : <PostsList postList={postList} />\n      }\n      {isLoading && (\n        <p className=\"loading-text\">Loading...</p>\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}